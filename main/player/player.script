local jump_velocity = 400       -- 初始速度
local gravity = 700                  -- 引力


-- Different Player State
local STATE_RUN = 0
local STATE_JUMP = 1
local STATE_FALL = 2
local STATE_HURT = 3



--- State Logic
local function enter_state_run(self)
	self.state = STATE_RUN

	
	sprite.play_flipbook(".", hash("run") )
end

local function enter_state_jump(self)
	
	self.state = STATE_JUMP
	sprite.play_flipbook(".", hash("jump") )

	self.velocity = jump_velocity; -- 新增代碼
end

local function enter_state_fall(self)
	self.state = STATE_FALL
	sprite.play_flipbook(".", hash("fall") )
end

local function enter_state_hit(self)
	self.state = STATE_HIT
	sprite.play_flipbook(".", hash("hit") )

	msg.post("#collisionobject", "disable")
	
	-- 2
	msg.post("gameController#script", "game_over")    -- Tell GameController to handle game over

	
end

local function is_grounded(self)
	return go.get_position().y <= self.ground_pos
end

local function reset_ground_pos(self)
	local pos = go.get_position()

	pos.y = self.ground_pos
	go.set_position(pos)
end


local function reset_player(self) 
	print("DEBUG: reset_player")

	reset_ground_pos(self)
	enter_state_run(self)

	timer.delay(1, false, function()
		msg.post("#collisionobject", "enable")
	end);
end 


function init(self)
	self.ground_pos = go.get_position().y 
	
	-- 1
	msg.post(".", "acquire_input_focus")  -- 新增代碼
	-- self.velocity = 0
	
	enter_state_run(self)
end

-- 2
function on_input(self, action_id, action)
	
	-- 3
	if action_id == hash("touch") then
		if action.pressed then
			-- 4
			if(self.state == STATE_RUN) then
				enter_state_jump(self)
			end
		end
	end
end


local function update_state_jump_fall(self, dt)
	-- 1
	local pos = go.get_position();
	pos.y = pos.y + dt * self.velocity;
	go.set_position(pos);

	-- 2
	self.velocity = self.velocity - gravity * dt

	if self.state == STATE_JUMP then
		-- 3
		if self.velocity < 0 then
			enter_state_fall(self)
		end
	elseif self.state == STATE_FALL then
		if(is_grounded(self)) then 
			reset_ground_pos(self)
			enter_state_run(self)
		end
	end
end

-- 1
function on_message(self, message_id, message, sender)

	-- 2
	if message_id == hash("collision_response") then
		-- 3
		enter_state_hit(self)		
	elseif message_id == hash("reset_player") then 	
		reset_player(self)
	end
end


function update(self, dt)
	if(self.state == STATE_JUMP or self.state == STATE_FALL) then
		update_state_jump_fall(self, dt)
	end
end

